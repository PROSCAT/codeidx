using FileIndexer.Helpers;
using FileIndexer.ViewModels;
using Lucene.Net.Analysis;
using Lucene.Net.Index;
using Lucene.Net.QueryParsers;
using Lucene.Net.Search;
using Lucene.Net.Search.Highlight;
using Lucene.Net.Search.Spans;
using Lucene.Net.Store;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace FileIndexer.LuceneServices
{
    public class LuceneSearcher
    {

        public static LuceneSearcher Instance { get; private set; }

        private static ApplicationViewModel ApplicationView
        {
            get
            {
                return ApplicationViewModel.Instance;
            }
        }

        static LuceneSearcher()
        {
            Instance = new LuceneSearcher();
        }

        public async Task<IEnumerable<SearchResultViewModel>> Search(IndexViewModel indexDirectory, string searchString)
        {
            if (!LuceneHelper.IsValidIndexDirectory(indexDirectory.IndexDirectory) || string.IsNullOrWhiteSpace(searchString))
                return Enumerable.Empty<SearchResultViewModel>();

            List<SearchResultViewModel> results = new List<SearchResultViewModel>();

            using (var reader = IndexReader.Open(FSDirectory.Open(indexDirectory.IndexDirectory), true))
            using (var searcher = new IndexSearcher(reader))
            {
                //TODO use paging
                var resultCollector = TopScoreDocCollector.Create(searcher.MaxDoc, false);

                bool matchCase = ApplicationView.Settings.MatchCase;
                bool matchWholeWord = ApplicationView.Settings.MatchWholeWord;

                Query query = null;
                string expandedSearchString = LuceneHelper.ExpandTokenBreak(searchString);

                if (matchWholeWord)
                    query = BuildMatchWholeWordQuery(expandedSearchString, matchCase);
                else
                    query = BuildMatchAnywhereQuery(reader, expandedSearchString, searchString, matchCase);

                searcher.Search(query, resultCollector);
                //TODO search in matches async
                foreach (var match in resultCollector.TopDocs().ScoreDocs)
                {
                    var curDoc = reader.Document(match.Doc);

                    string docDirectory = curDoc.Get(Constants.IndexFields.Directory);
                    string docFilename = curDoc.Get(Constants.IndexFields.Filename);
                    string docExtension = curDoc.Get(Constants.IndexFields.Extension);

                    string documentFilename = Path.Combine(docDirectory, docFilename) + docExtension;
                    var matchingLines = await GetMatchingLines(documentFilename, searchString, matchCase, matchWholeWord);

                    foreach (var lineMatch in matchingLines)
                    {
                        results.Add(new SearchResultViewModel
                        {
                            Directory = docDirectory,
                            Filename = docFilename,
                            Extension = docExtension,
                            MatchingLine = lineMatch.Line,
                            LineNumber = lineMatch.LineNumber
                        });
                    }
                }
            }

            return results;
        }

        private async Task<IEnumerable<LineMatch>> GetMatchingLines(string file, string searchString, bool matchCase, bool matchWholeWord)
        {
            //TODO improve performance!
            //getting matching lines takes the most time

            if (!File.Exists(file))
                return null;

            string adjustedSearchString = matchCase ? searchString : searchString.ToLower();
            List<LineMatch> matchingLines = new List<LineMatch>();

            using (FileStream fs = new FileStream(file, FileMode.Open, FileAccess.Read))
            using (StreamReader reader = new StreamReader(fs))
            {
                string curLine;
                int lineNumber = 1;
                while ((curLine = await reader.ReadLineAsync()) != null)
                {
                    string highlightedLine = await HighlightMatches(curLine, adjustedSearchString, matchCase, matchWholeWord);
                    if (!string.IsNullOrEmpty(highlightedLine))
                    {
                        matchingLines.Add(new LineMatch
                        {
                            Line = highlightedLine,
                            LineNumber = lineNumber
                        });
                    }

                    lineNumber++;
                }
            }

            return matchingLines;
        }

        private async Task<string> HighlightMatches(string line, string searchString, bool matchCase, bool matchWholeWord)
        {
            bool validMatchFound = false;
            string adjustedSearchLine = matchCase ? line : line.ToLower();

            var highlightedLine = line;
            var matches = GetStringMatches(adjustedSearchLine, searchString).OrderByDescending(cur => cur.EndIndex).ToList();

            //List<Task> highlightMatchesTasks = new List<Task>();
            //foreach (var match in matches)
            var highlightMatchesTasks = matches.Select(match =>
          {
              new Task(() =>
                  {
                      if (matchWholeWord)
                      {
                          bool previousCharacterMatters = !LuceneHelper.IsValidTokenBreakCharactor(searchString.FirstOrDefault());
                          char previousCharacter = adjustedSearchLine.ElementAtOrDefault(match.StartIndex - 1);

                          bool nextCharacterMatters = !LuceneHelper.IsValidTokenBreakCharactor(searchString.LastOrDefault());
                          char nextCharacter = adjustedSearchLine.ElementAtOrDefault(match.EndIndex);

                          bool isValidWholeWordMatch = (!previousCharacterMatters || LuceneHelper.IsValidTokenBreakCharactor(previousCharacter)) &&
                              (!nextCharacterMatters || LuceneHelper.IsValidTokenBreakCharactor(nextCharacter));

                          if (!isValidWholeWordMatch)
                              return;
                      }

                      highlightedLine = highlightedLine.Insert(match.EndIndex, Constants.SearchResultHighlightEndTag);
                      highlightedLine = highlightedLine.Insert(match.StartIndex, Constants.SearchResultHighlightStartTag);

                      validMatchFound = true;
                  });
          });

            await Task.WhenAll(highlightMatchesTasks);
            return validMatchFound ? highlightedLine : string.Empty;
        }

        private bool IsValidWholeWordMatch(string line, string searchString)
        {
            foreach (var match in GetStringMatches(line, searchString))
            {
                bool previousCharacterMatters = !LuceneHelper.IsValidTokenBreakCharactor(searchString.FirstOrDefault());
                char previousCharacter = line.ElementAtOrDefault(match.StartIndex - 1);

                bool nextCharacterMatters = !LuceneHelper.IsValidTokenBreakCharactor(searchString.LastOrDefault());
                char nextCharacter = line.ElementAtOrDefault(match.EndIndex);

                if ((!previousCharacterMatters || LuceneHelper.IsValidTokenBreakCharactor(previousCharacter)) &&
                    (!nextCharacterMatters || LuceneHelper.IsValidTokenBreakCharactor(nextCharacter)))
                {
                    return true;
                }
            }

            return false;
        }

        private IEnumerable<StringMatch> GetStringMatches(string line, string pattern)
        {
            int lastMatchEndIndex = 0;
            int curMatchStartIndex;
            while ((curMatchStartIndex = line.IndexOf(pattern, lastMatchEndIndex, StringComparison.Ordinal)) != -1)
            {
                lastMatchEndIndex = curMatchStartIndex + pattern.Length;
                yield return new StringMatch
                {
                    StartIndex = curMatchStartIndex,
                    EndIndex = lastMatchEndIndex
                };
            }
        }

        private Query BuildMatchWholeWordQuery(string searchString, bool matchCase)
        {
            List<string> searchTerms = null;
            string adjustedSearchString = searchString;
            string fieldToSearch = Constants.IndexFields.Content;

            if (!matchCase)
            {
                fieldToSearch = Constants.IndexFields.ContentCaseInsensitive;
                adjustedSearchString = adjustedSearchString.ToLower();
            }

            searchTerms = adjustedSearchString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();

            // build content query
            PhraseQuery contentQuery = new PhraseQuery();
            foreach (var curTerm in searchTerms)
                contentQuery.Add(new Term(fieldToSearch, curTerm));

            BooleanQuery resultQuery = new BooleanQuery();
            resultQuery.Add(contentQuery, Occur.MUST);

            var fileTypeQuery = BuildFileTypeFilter();
            if (fileTypeQuery != null)
                resultQuery.Add(fileTypeQuery, Occur.MUST);

            return resultQuery;
        }

        private Query BuildFileTypeFilter()
        {
            bool allFiltersActive = ApplicationView.ActiveFileFilters.All(cur => cur.IsActive);
            bool noFiltersActive = ApplicationView.ActiveFileFilters.All(cur => !cur.IsActive);
            if (!allFiltersActive && !noFiltersActive)
            {
                //append file filter query
                BooleanQuery fileFilterQuery = new BooleanQuery
                {
                    // at least one filter must apply
                    MinimumNumberShouldMatch = 1
                };

                foreach (var filter in ApplicationView.ActiveFileFilters.Where(cur => cur.IsActive))
                {
                    TermQuery filterQuery = new TermQuery(new Term(Constants.IndexFields.Extension, filter.Filter.Trim('*')));
                    fileFilterQuery.Add(filterQuery, Occur.SHOULD);
                }

                return fileFilterQuery;
            }

            return null;
        }

        private Query BuildMatchAnywhereQuery(IndexReader indexReader, string expandedSearchString, string originalSearchString, bool matchCase)
        {
            List<string> searchTerms = null;
            string adjustedSearchString = expandedSearchString;
            string fieldToSearch = Constants.IndexFields.Content;

            if (!matchCase)
            {
                fieldToSearch = Constants.IndexFields.ContentCaseInsensitive;
                adjustedSearchString = adjustedSearchString.ToLower();
            }

            searchTerms = adjustedSearchString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();

            BooleanQuery resultQuery = new BooleanQuery();
            var fileTypeQuery = BuildFileTypeFilter();
            if (fileTypeQuery != null)
                resultQuery.Add(fileTypeQuery, Occur.MUST);

            bool onlyOneTerm = searchTerms.Count == 1;
            if (onlyOneTerm)
            {
                QueryParser parser = new QueryParser(Lucene.Net.Util.Version.LUCENE_30, fieldToSearch, new KeywordAnalyzer());
                parser.AllowLeadingWildcard = true;

                var contentQuery = parser.Parse(string.Format("*{0}*", QueryParser.Escape(originalSearchString)));
                resultQuery.Add(contentQuery, Occur.MUST);
            }
            else
            {
                var firstTerm = searchTerms.FirstOrDefault();
                var lastTerm = searchTerms.LastOrDefault();

                MultiPhraseQuery query = new MultiPhraseQuery();

                List<Term> firstTermMatches = new List<Term>();
                List<Term> lastTermMatches = new List<Term>();

                //reader.Terms(new Term(..., ...)) does not work correctly, so check every term!
                var termEnum = indexReader.Terms();

                while (termEnum.Next())
                {
                    var curTerm = termEnum.Term;
                    //skip wrong fields
                    if (curTerm.Field != fieldToSearch)
                        continue;

                    //skip if already collected
                    if (firstTermMatches.Any(cur => cur.Text == curTerm.Text) ||
                        lastTermMatches.Any(cur => cur.Text == curTerm.Text))
                        continue;

                    //TODO not neccessary for punctuation characters
                    if (curTerm.Text.StartsWith(lastTerm))
                        lastTermMatches.Add(curTerm);

                    if (curTerm.Text.EndsWith(firstTerm))
                        firstTermMatches.Add(curTerm);
                }

                if (firstTermMatches.Count > 0)
                    query.Add(firstTermMatches.ToArray());

                bool includeFirstTerm = firstTermMatches.Count == 0;
                bool includeLastTerm = lastTermMatches.Count == 0;

                int startIndex = includeFirstTerm ? 0 : 1;
                int endIndex = searchTerms.Count - (includeLastTerm ? 0 : 1);

                for (int i = startIndex; i < endIndex; i++)
                    query.Add(new Term(fieldToSearch, searchTerms[i]));

                if (lastTermMatches.Count > 0)
                    query.Add(lastTermMatches.ToArray());

                resultQuery.Add(query, Occur.MUST);
            }

            return resultQuery;
        }


        internal IEnumerable<string> GetAvailableFileExtensions(IndexViewModel indexDirectory)
        {
            if (!LuceneHelper.IsValidIndexDirectory(indexDirectory.IndexDirectory))
                return Enumerable.Empty<string>();

            var availableExtensions = new List<string>();
            using (var reader = IndexReader.Open(FSDirectory.Open(indexDirectory.IndexDirectory), true))
            {
                var termEnum = reader.Terms();
                while (termEnum.Next())
                {
                    var curTerm = termEnum.Term;
                    if (curTerm.Field != Constants.IndexFields.Extension)
                        continue;

                    if (!availableExtensions.Contains(curTerm.Text))
                        availableExtensions.Add("*" + curTerm.Text);
                }
            }

            return availableExtensions;
        }
    }
}
